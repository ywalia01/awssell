AWSTemplateFormatVersion: "2010-09-09"
Description: AWS CloudFormation for E-commerce Web Application

Parameters:
  InstanceEnvironmentParameter:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Enter dev or prod environment, default is dev.

  # KeyNameParameter:
  #   Type: String
  #   Description: Name of the existing key pair to be used for SSH access.

  # UserEmail:
  #   Type: String
  #   Description: Email of the user to subscribe to the SNS topic

  # JWTSecret:
  #   Type: String
  #   Description: JWT Secret

Mappings:
  InstanceMap:
    us-east-1:
      dev: t2.micro
      prod: m1.small
    us-west-1:
      dev: m1.small
      prod: m1.large
  AMIMap:
    us-east-1:
      dev: ami-051f8a213df8bc089
      prod: ami-0915bcb5fa77e4892
    us-west-1:
      dev: ami-051f8a213df8bc089
      prod: ami-066c82dabe6dd7f73

Resources:
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        !Join ["-", [webapp-security-group, !Ref InstanceEnvironmentParameter]]
      GroupDescription: "Allow HTTP/HTTPS, SSH, and custom port inbound and outbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 4173
          ToPort: 4173
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 5173
          ToPort: 5173

  WebAppEC2Instance:
    Type: "AWS::EC2::Instance"
    DependsOn: WebAppSecurityGroup
    Properties:
      AvailabilityZone: us-east-1a
      # ImageId: ami-0d5eff06f840b45e9
      ImageId:
        !FindInMap [
          AMIMap,
          !Ref "AWS::Region",
          !Ref InstanceEnvironmentParameter,
        ]
      # InstanceType: t2.micro
      InstanceType:
        !FindInMap [
          InstanceMap,
          !Ref "AWS::Region",
          !Ref InstanceEnvironmentParameter,
        ]
      KeyName: yash
      # KeyName: !Ref KeyNameParameter
      SecurityGroups:
        - !Ref WebAppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # sudo yum install nodejs nginx git -y
          sudo yum install nodejs git -y
          # sudo systemctl enable nginx
          # sudo systemctl start nginx
          curl --silent --location https://rpm.nodesource.com/setup_14.x | sudo bash -
          mkdir -p /home/ec2-user/csci5409-term-assign
          cd /home/ec2-user/csci5409-term-assign
          sudo git clone https://github.com/ywalia01/csci5409-term-assign.git .
          cd frontend
          sudo npm install
          sudo npm run build
          sudo npm run preview 
          # sudo cp -r /home/ec2-user/csci5409-term-assign/frontend/dist/* /usr/share/nginx/html/ || true
          # sudo systemctl restart nginx

  MyEIP:
    Type: AWS::EC2::EIP
    DependsOn: WebAppEC2Instance
    Properties:
      InstanceId: !Ref WebAppEC2Instance

  # JwtSecret:
  #   Type: AWS::SecretsManager::Secret
  #   Properties:
  #     Name: !Sub "${InstanceEnvironmentParameter}/jwtSecret"
  #     Description: "JWT secret key for authentication"
  #     SecretString: !Ref JWTSecret

  DDBReceiptsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${InstanceEnvironmentParameter}/DDBReceiptsTableName"
      Description: "Name of the DynamoDB table for UserReceipts"
      SecretString: !Sub '{"TableName":"${ReceiptsTable}"}'

  DDBProductsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${InstanceEnvironmentParameter}/DDBProductsTableName"
      Description: "Name of the DynamoDB table for Products"
      SecretString: !Sub '{"TableName":"${ProductsTable}"}'

  ReceiptsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: UserReceipts
      AttributeDefinitions:
        - AttributeName: userEmail
          AttributeType: S
        - AttributeName: receiptId
          AttributeType: S
      KeySchema:
        - AttributeName: userEmail
          KeyType: HASH # Partition key
        - AttributeName: receiptId
          KeyType: RANGE # Sort key
      BillingMode: PAY_PER_REQUEST

  ProductsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: Products
      AttributeDefinitions:
        - AttributeName: productId
          AttributeType: N
      KeySchema:
        - AttributeName: productId
          KeyType: HASH # Partition key
      BillingMode: PAY_PER_REQUEST

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: YashNotificationTopic

  MySNSSubscription:
    Type: AWS::SNS::Subscription
    DependsOn: MySNSTopic
    Properties:
      Protocol: email
      Endpoint: "yashbest005@gmail.com"
      # Endpoint: !Ref UserEmail
      TopicArn: !Ref MySNSTopic

  ListFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: listFunc
      Handler: list.lambda_handler
      Role: arn:aws:iam::339713095314:role/LabRole
      Code:
        S3Bucket: term-assign
        S3Key: list.py.zip
      Runtime: python3.8
      Timeout: 30
      Environment:
        Variables:
          PROD_TABLE_SECRET_ARN: !Ref DDBProductsSecret

  ReceiptFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: receiptFunc
      Handler: receipt.lambda_handler
      Role: arn:aws:iam::339713095314:role/LabRole
      Code:
        S3Bucket: term-assign
        S3Key: receipt.py.zip
      Runtime: python3.8
      Timeout: 30
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref MySNSTopic
          REC_TABLE_SECRET_ARN: !Ref DDBReceiptsSecret
          # JWT_SECRET_ARN: !Ref JwtSecret

  # LoginFunction:
  #   Type: "AWS::Lambda::Function"
  #   Properties:
  #     FunctionName: loginFunc
  #     Handler: login.lambda_handler
  #     Role: arn:aws:iam::339713095314:role/LabRole
  #     Code:
  #       S3Bucket: term-assign
  #       S3Key: login.zip
  #     Runtime: python3.8
  #     Timeout: 30
  #     Environment:
  #       Variables:
  #         DDB_TABLE_NAME: !Ref ReceiptsTable
  #         # JWT_SECRET_ARN: !Ref JwtSecret

  # RegisterFunction:
  #   Type: "AWS::Lambda::Function"
  #   Properties:
  #     FunctionName: registerFunc
  #     Handler: register.lambda_handler
  #     Role: arn:aws:iam::339713095314:role/LabRole
  #     Code:
  #       S3Bucket: term-assign
  #       S3Key: register.zip
  #     Runtime: python3.8
  #     Timeout: 30
  #     Environment:
  #       Variables:
  #         DDB_TABLE_NAME: !Ref ReceiptsTable

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ReceiptApi
      Description: API Gateway for Receipt generation
      # FailOnWarnings: true
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - EDGE

  ReceiptApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: receipt
      RestApiId: !Ref ApiGatewayRestApi

  ReceiptApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ReceiptApiResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: false
      Integration:
        ConnectionType: INTERNET
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReceiptFunction.Arn}/invocations
      # MethodResponses:
      #   - StatusCode: 200

  ReceiptApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ReceiptApiResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: TRUE
            method.response.header.Access-Control-Allow-Methods: TRUE
            method.response.header.Access-Control-Allow-Origin: TRUE

  # # Login Function API Gateway setup...
  # LoginApiResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
  #     PathPart: login
  #     RestApiId: !Ref ApiGatewayRestApi

  # LoginApiMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref ApiGatewayRestApi
  #     ResourceId: !Ref LoginApiResource
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     Integration:
  #       IntegrationHttpMethod: POST
  #       Type: AWS_PROXY
  #       Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LoginFunction.Arn}/invocations
  #     MethodResponses:
  #       - StatusCode: 200

  # # Register Function API Gateway setup...
  # RegisterApiResource:
  #   Type: AWS::ApiGateway::Resource
  #   Properties:
  #     ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
  #     PathPart: register
  #     RestApiId: !Ref ApiGatewayRestApi

  # RegisterApiMethod:
  #   Type: AWS::ApiGateway::Method
  #   Properties:
  #     RestApiId: !Ref ApiGatewayRestApi
  #     ResourceId: !Ref RegisterApiResource
  #     HttpMethod: POST
  #     AuthorizationType: NONE
  #     Integration:
  #       IntegrationHttpMethod: POST
  #       Type: AWS_PROXY
  #       Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RegisterFunction.Arn}/invocations
  #     MethodResponses:
  #       - StatusCode: 200

  # List Function API Gateway setup (GET endpoint)...
  ListApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: list
      RestApiId: !Ref ApiGatewayRestApi

  ListApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ListApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST # This stays as POST because it refers to the method Lambda expects from API Gateway
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ListFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: 200

  ListApiOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      ResourceId: !Ref ListApiResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: TRUE
            method.response.header.Access-Control-Allow-Methods: TRUE
            method.response.header.Access-Control-Allow-Origin: TRUE

  # Permissions for each Lambda to be invoked by API Gateway...
  LambdaPermissionForApiGatewayReceipt:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ReceiptFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/receipt

  # LambdaPermissionForApiGatewayLogin:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref LoginFunction
  #     Action: lambda:InvokeFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/login

  # LambdaPermissionForApiGatewayRegister:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !Ref RegisterFunction
  #     Action: lambda:InvokeFunction
  #     Principal: apigateway.amazonaws.com
  #     SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/POST/register

  LambdaPermissionForApiGatewayList:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ListFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/GET/list

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: "application/json"
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  # ApiGatewayStage:
  #   Type: AWS::ApiGateway::Stage
  #   Properties:
  #     DeploymentId: !Ref ApiGatewayDeployment
  #     Description: Lambda API Stage v0
  #     RestApiId: !Ref ApiGatewayRestApi
  #     StageName: "v0"

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      # - ApiGatewayMethod
      - ListApiMethod
      - ReceiptApiMethod
      - ListApiOptionsMethod
      - ReceiptApiOptionsMethod
      # - LoginApiMethod
      # - RegisterApiMethod

    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Description: "My API Deployment"
      StageName: "prod"

Outputs:
  WebAppInstanceID:
    Description: "ID of the EC2 instance running the React application"
    Value: !Ref WebAppEC2Instance
    Export:
      Name: "WebAppInstanceID"

  WebAppPublicIP:
    Description: "Public IP address of the EC2 instance"
    Value: !GetAtt WebAppEC2Instance.PublicIp
    Export:
      Name: "WebAppPublicIP"

  WebAppPublicDNS:
    Description: "Public DNS name of the EC2 instance"
    Value: !GetAtt WebAppEC2Instance.PublicDnsName
    Export:
      Name: "WebAppPublicDNS"

  ApiGatewayUrl:
    Description: "URL of the deployed API Gateway"
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: "ApiGatewayUrl"

  ReceiptsTableName:
    Description: "Name of the DynamoDB table used for storing Receipts"
    Value: !Ref ReceiptsTable
    Export:
      Name: "ReceiptsTableName"

  ProductsTableName:
    Description: "Name of the DynamoDB table used for storing Products"
    Value: !Ref ProductsTable
    Export:
      Name: "ProductsTableName"

  SNSTopicARN:
    Description: "ARN of the SNS topic for notifications"
    Value: !Ref MySNSTopic
    Export:
      Name: "SNSTopicARN"

  ListFunctionARN:
    Description: "ARN of the Lambda function for listing items"
    Value: !GetAtt ListFunction.Arn
    Export:
      Name: "ListFunctionARN"

  ReceiptFunctionARN:
    Description: "ARN of the Lambda function for handling receipts"
    Value: !GetAtt ReceiptFunction.Arn
    Export:
      Name: "ReceiptFunctionARN"

  # LoginFunctionARN:
  #   Description: "ARN of the Lambda function for handling login"
  #   Value: !GetAtt LoginFunction.Arn
  #   Export:
  #     Name: "LoginFunctionARN"

  # RegisterFunctionARN:
  #   Description: "ARN of the Lambda function for handling registration"
  #   Value: !GetAtt RegisterFunction.Arn
  #   Export:
  #     Name: "RegisterFunctionARN"
